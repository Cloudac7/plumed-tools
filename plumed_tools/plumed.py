from typing import Optional, Union
from pydantic import BaseModel

from plumed_tools.actions.analysis import PRINT
from plumed_tools.actions.bias import (
    LOWER_WALLS, UPPER_WALLS, OPES_METAD, OPES_METAD_EXPLORE, METAD
)
from plumed_tools.actions.colvar import (
    DISTANCE, ANGLE, TORSION, COORDINATION
)
from plumed_tools.actions.generic import UNITS
from plumed_tools.actions.group import GROUP, COM, VATOM
from ase.atoms import Atoms


class ACTIONS(BaseModel):
    distance: Optional[list[Union[DISTANCE, None]]] = []
    angle: Optional[list[Optional[ANGLE]]] = []
    torsion: Optional[list[Optional[TORSION]]] = []
    coordination: Optional[list[Optional[COORDINATION]]] = []
    com: Optional[list[Optional[COM]]] = []
    upper_walls: Optional[list[Optional[UPPER_WALLS]]] = []
    lower_walls: Optional[list[Optional[LOWER_WALLS]]] = []

    metad: Optional[Optional[METAD]] = None
    opes_metad: Optional[Optional[OPES_METAD]] = None
    opes_metad_explore: Optional[Optional[OPES_METAD_EXPLORE]] = None

    print: Optional[list[Optional[PRINT]]] = []


class PlumedInput(BaseModel):
    UNITS: Optional[UNITS]
    VATOMS: Optional[list[VATOM]]
    GROUPS: Optional[list[GROUP]]
    ACTIONS: Optional[ACTIONS]


class PlumedBuilder:

    def __init__(self, init_structure: Atoms, units: Optional[dict[str, str]] = None):
        self.init_structure = init_structure
        if units:
            self.units = UNITS(**units)
        else:
            self.units = UNITS()
        self.vatoms = []
        self.groups = []
        self.actions = ACTIONS()
        self.plumed_input = None
        

    def build(self):
        self.plumed_input = PlumedInput(
            UNITS=self.units,
            VATOMS=self.vatoms,
            GROUPS=self.groups,
            ACTIONS=self.actions
        )
        return self.plumed_input
    
    def add_com(self, **kwargs):
        com = COM(**kwargs)
        self.vatoms.append(com)

    def add_group(self, ATOMS: list[Union[int, str, VATOM]], **kwargs):
        for atom in ATOMS:
            if isinstance(atom, int):
                if atom < 0 or atom >= len(self.init_structure):
                    atom = atom % len(self.init_structure)
            elif isinstance(atom, str):
                if 
            else:
                raise ValueError("ATOMS must be a list of integers or strings")
        group = GROUP(ATOMS=ATOMS, **kwargs)
        self.groups.append(group)
        return self

    def add_distance(self, **kwargs):
        distance = DISTANCE(**kwargs)
        self.actions.distance.append(distance)
        return self

    def add_angle(self, **kwargs):
        angle = ANGLE(**kwargs)
        self.actions.angle.append(angle)
        return self

    def add_torsion(self, **kwargs):
        torsion = TORSION(**kwargs)
        self.actions.torsion.append(torsion)
        return self

    def add_coordination(self, **kwargs):
        coordination = COORDINATION(**kwargs)
        self.actions.coordination.append(coordination)
        return self

    def add_upper_walls(self, **kwargs):
        upper_walls = UPPER_WALLS(**kwargs)
        self.actions.upper_walls.append(upper_walls)
        return self

    def add_lower_walls(self, **kwargs):
        lower_walls = LOWER_WALLS(**kwargs)
        self.actions.lower_walls.append(lower_walls)
        return self

    def add_metad(self, **kwargs):
        metad = METAD(**kwargs)
        self.actions.metad = metad
        return self

    def add_opes_metad(self, **kwargs):
        opes_metad = OPES_METAD(**kwargs)
        self.actions.opes_metad = opes_metad
        return self

    def add_opes_metad_explore(self, **kwargs):
        opes_metad_explore = OPES_METAD_EXPLORE(**kwargs)
        self.actions.opes_metad_explore = opes_metad_explore
        return self

    def add_print(self, **kwargs):
        print_ = PRINT(**kwargs)
        self.actions.print.append(print_)
        return self


class PlumedFile:

    def __init__(self, plumed_input: PlumedInput):
        self.plumed_input = plumed_input

    def generate(self):
        lines = ["# PLUMED input file generated by plumed_tools\n"]
        lines += self.generate_units()
        lines += self.generate_groups()
        lines += self.generate_actions()

    def generate_units(self):
        lines = ["# Define Units\n"]
        lines += [f"UNITS {" ".join([f'{k}={v}' for k, v in self.plumed_input.UNITS])}\n"]
        return lines
    
    def generate_groups(self):
        lines = ["# Define Groups\n"]
        for group in self.plumed_input.GROUPS:
            if group.LABEL is None:
                group.LABEL = f"group_{len(lines)}"
            line = f"GROUP LABEL={group.LABEL}"
            line += " ATOMS="
            for i, atom in enumerate(group.ATOMS):
                if i > 0:
                    line += ","
                if isinstance(atom, VATOM):
                    line += f"{atom.LABEL}"
                else:
                    line += f"{atom}"
            if group.REMOVE is not None:
                line += " REMOVE="
                for i, atom in enumerate(group.REMOVE):
                    if i > 0:
                        line += ","
                    if isinstance(atom, VATOM):
                        line += f"{atom.LABEL}"
                    else:
                        line += f"{atom}"
            for key, value in group.model_dump().items():
                if key not in ["ATOMS", "LABEL", "REMOVE"]:
                    line += f" {key}={value}"
            lines.append(line)
        return lines
    
    def generate_actions(self):
        lines = ["# Define Actions\n"]
        for action in self.plumed_input.ACTIONS:
            if action.LABEL is None:
                action.LABEL = f"action_{len(lines)}"
            line = f"{action.ACTION} LABEL={action.LABEL}"
            for key, value in action.model_dump().items():
                if key not in ["LABEL", "ACTION"]:
                    line += f" {key}={value}"
            lines.append(line)
        return lines